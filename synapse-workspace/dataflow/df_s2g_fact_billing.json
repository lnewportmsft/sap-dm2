{
	"name": "df_s2g_fact_billing",
	"properties": {
		"description": "C_BILLINGDOCITEMBASICDEX_1",
		"folder": {
			"name": "SIlver_To_Gold"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "BillingSilverSource",
					"description": "Fact dataset on the Silver Area"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "BillingSilverSourceDelete"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "ISALESORGANIZATIONSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IPLANTSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IFISCALYEARFORCOMPANYCODESource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IPRODUCTSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IPROFITCENTERSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IDISTRIBUTIONCHANNELSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IDIVISIONSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "ISHIPPINGPOINTSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "ICONTROLLINGAREASource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IPRODUCTGROUP2Source"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IPERSONWORKAGREEMENT1Source"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "ICOSTCENTERSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "ICOMPANYCODESource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IBUSINESSAREASource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "ICUSTOMERSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IFISCALPERIODFORVARIANTSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IOVERALLBILLINGSTATUSSource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "IBILLINGDOCUMENTTYPESource"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "ICUSTOMERGROUPSource"
				},
				{
					"dataset": {
						"referenceName": "ds_metadata",
						"type": "DatasetReference"
					},
					"name": "getTimestamp"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "GoldDeleteTarget"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "GoldUpsertTarget"
				},
				{
					"linkedService": {
						"referenceName": "ls_SQLPool",
						"type": "LinkedServiceReference"
					},
					"name": "SQLDeleteTarget"
				},
				{
					"linkedService": {
						"referenceName": "ls_SQLPool",
						"type": "LinkedServiceReference"
					},
					"name": "SQLUpsertTarget",
					"description": "Export data to C_BILLINGDOCITEMBASICDEX_1"
				},
				{
					"dataset": {
						"referenceName": "ds_metadata",
						"type": "DatasetReference"
					},
					"name": "updateLastProcessedTimestamp"
				}
			],
			"transformations": [
				{
					"name": "GetRecordsWithMaxTimeStampOnly"
				},
				{
					"name": "AllowDelete"
				},
				{
					"name": "AllowUpsert"
				},
				{
					"name": "JoinWithIPLANT"
				},
				{
					"name": "JoinWithISALESORGANIZATION"
				},
				{
					"name": "JoinWithIPROFITCENTER"
				},
				{
					"name": "JoinWithIDISTRIBUTIONCHANNEL"
				},
				{
					"name": "JoinWithIDIVISION"
				},
				{
					"name": "JoinWithISHIPPINGPOINT"
				},
				{
					"name": "JoinWithICONTROLLINGAREA"
				},
				{
					"name": "JoinWithIPRODUCTGROUP2"
				},
				{
					"name": "JoinWithICOSTCENTER"
				},
				{
					"name": "JoinWithICOMPANYCODE"
				},
				{
					"name": "JoinWithIPRODUCT"
				},
				{
					"name": "AddKeyIPLANT"
				},
				{
					"name": "AddKeyISALESORGANIZATION"
				},
				{
					"name": "AddKeyIPROFITCENTER"
				},
				{
					"name": "AddKeyIDISTRIBUTIONCHANNEL"
				},
				{
					"name": "AddKeyIDIVISION"
				},
				{
					"name": "AddKeyISHIPPINGPOINT"
				},
				{
					"name": "AddKeyICONTROLLINGAREA"
				},
				{
					"name": "AddKeyIPRODUCTGROUP2"
				},
				{
					"name": "AddKeyICOSTCENTER"
				},
				{
					"name": "AddKeyICOMPANYCODE"
				},
				{
					"name": "AddKeyIPRODUCT"
				},
				{
					"name": "JoinWithIPERSONWORKAGREEMENT1"
				},
				{
					"name": "AddKeyIPERSONWORKAGREEMENT1"
				},
				{
					"name": "JoinWithIBUSINESSAREA"
				},
				{
					"name": "AddKeyIBUSINESSAREA"
				},
				{
					"name": "JoinWithICUSTOMERPayerParty"
				},
				{
					"name": "AddKeyICUSTOMERPayerParty"
				},
				{
					"name": "JoinWithICUSTOMERSoldToParty"
				},
				{
					"name": "AddKeyICUSTOMERSoldToParty"
				},
				{
					"name": "JoinWithICUSTOMERBillToParty"
				},
				{
					"name": "AddKeyICUSTOMERBillToParty"
				},
				{
					"name": "JoinWithICUSTOMERShipToParty"
				},
				{
					"name": "AddKeyICUSTOMERPShipToParty"
				},
				{
					"name": "IFISCALPERIODFORVARIANTFilter"
				},
				{
					"name": "JoinWithIFISCALPERIODFORVARIANT"
				},
				{
					"name": "AddKeyIFISCALPERIODFORVARIANT"
				},
				{
					"name": "JoinWithIOVERALLBILLINGSTATUS"
				},
				{
					"name": "AddKeyIOVERALLBILLINGSTATUS"
				},
				{
					"name": "JoinWithIBILLINGDOCUMENTTYPE"
				},
				{
					"name": "AddKeyIBILLINGDOCUMENTTYPE"
				},
				{
					"name": "JoinWithICUSTOMERGROUP"
				},
				{
					"name": "AddKeyICUSTOMERPGROUP"
				},
				{
					"name": "ReplaceNULLDimensions"
				},
				{
					"name": "filterLastProcessedTimestampForSystem"
				},
				{
					"name": "setLastProcessedTimestamp"
				},
				{
					"name": "selectLastProcessedTimestampPerSystem"
				},
				{
					"name": "SelectICOSTCENTER"
				},
				{
					"name": "distinctICOSTCENTER"
				},
				{
					"name": "SelectIPROFITCENTER"
				},
				{
					"name": "distinctIPROFITCENTER"
				},
				{
					"name": "allowUpdateLastProcessedTimestamp"
				},
				{
					"name": "getNewMaxTimestamp"
				},
				{
					"name": "retrieveOldTimestamp"
				},
				{
					"name": "setRowToUpdateTimestamp"
				},
				{
					"name": "GetDeletedRecordsWithMaxTimeStampOnly"
				},
				{
					"name": "AddKeyColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     p_name as string (\"C_BILLINGDOCITEMBASICDEX_1\"),",
				"     p_directory as string (\"data\"),",
				"     p_container as string (\"sap\"),",
				"     p_systemName as string (\"PM4CLNT400\"),",
				"     p_keyFields as string[] (['BILLINGDOCUMENT','BILLINGDOCUMENTITEM'])",
				"}",
				"source(output(",
				"          BILLINGDOCUMENT as string,",
				"          BILLINGDOCUMENTITEM as integer,",
				"          SALESDOCUMENTITEMCATEGORY as string,",
				"          SALESDOCUMENTITEMTYPE as string,",
				"          RETURNITEMPROCESSINGTYPE as string,",
				"          BILLINGDOCUMENTTYPE as string,",
				"          BILLINGDOCUMENTCATEGORY as string,",
				"          SDDOCUMENTCATEGORY as string,",
				"          CREATIONDATE as date,",
				"          CREATIONTIME as string,",
				"          LASTCHANGEDATE as date,",
				"          BILLINGDOCUMENTDATE as date,",
				"          BILLINGDOCUMENTISTEMPORARY as string,",
				"          ORGANIZATIONDIVISION as string,",
				"          DIVISION as string,",
				"          SALESOFFICE as string,",
				"          SALESORGANIZATION as string,",
				"          DISTRIBUTIONCHANNEL as string,",
				"          MATERIAL as string,",
				"          PRODUCT as string,",
				"          ORIGINALLYREQUESTEDMATERIAL as string,",
				"          INTERNATIONALARTICLENUMBER as string,",
				"          PRICINGREFERENCEMATERIAL as string,",
				"          BATCH as string,",
				"          MATERIALGROUP as string,",
				"          PRODUCTGROUP as string,",
				"          ADDITIONALMATERIALGROUP1 as string,",
				"          ADDITIONALMATERIALGROUP2 as string,",
				"          ADDITIONALMATERIALGROUP3 as string,",
				"          ADDITIONALMATERIALGROUP4 as string,",
				"          ADDITIONALMATERIALGROUP5 as string,",
				"          MATERIALCOMMISSIONGROUP as string,",
				"          PLANT as string,",
				"          STORAGELOCATION as string,",
				"          BILLINGDOCUMENTISCANCELLED as string,",
				"          CANCELLEDBILLINGDOCUMENT as string,",
				"          BILLINGDOCUMENTITEMTEXT as string,",
				"          SERVICESRENDEREDDATE as date,",
				"          BILLINGQUANTITY as decimal(20,3),",
				"          BILLINGQUANTITYUNIT as integer,",
				"          BILLINGQUANTITYINBASEUNIT as decimal(20,3),",
				"          BASEUNIT as integer,",
				"          MRPREQUIREDQUANTITYINBASEUNIT as decimal(20,3),",
				"          BILLINGTOBASEQUANTITYDNMNTR as decimal(5,0),",
				"          BILLINGTOBASEQUANTITYNMRTR as decimal(5,0),",
				"          ITEMGROSSWEIGHT as decimal(20,3),",
				"          ITEMNETWEIGHT as decimal(20,3),",
				"          ITEMWEIGHTUNIT as integer,",
				"          ITEMVOLUME as decimal(20,3),",
				"          ITEMVOLUMEUNIT as integer,",
				"          BILLTOPARTYCOUNTRY as string,",
				"          BILLTOPARTYREGION as string,",
				"          BILLINGPLANRULE as string,",
				"          BILLINGPLAN as string,",
				"          BILLINGPLANITEM as integer,",
				"          CUSTOMERPRICEGROUP as string,",
				"          PRICELISTTYPE as string,",
				"          TAXDEPARTURECOUNTRY as string,",
				"          VATREGISTRATION as string,",
				"          VATREGISTRATIONCOUNTRY as string,",
				"          VATREGISTRATIONORIGIN as string,",
				"          CUSTOMERTAXCLASSIFICATION1 as string,",
				"          CUSTOMERTAXCLASSIFICATION2 as string,",
				"          CUSTOMERTAXCLASSIFICATION3 as string,",
				"          CUSTOMERTAXCLASSIFICATION4 as string,",
				"          CUSTOMERTAXCLASSIFICATION5 as string,",
				"          CUSTOMERTAXCLASSIFICATION6 as string,",
				"          CUSTOMERTAXCLASSIFICATION7 as string,",
				"          CUSTOMERTAXCLASSIFICATION8 as string,",
				"          CUSTOMERTAXCLASSIFICATION9 as string,",
				"          SDPRICINGPROCEDURE as string,",
				"          NETAMOUNT as decimal(19,2),",
				"          TRANSACTIONCURRENCY as integer,",
				"          GROSSAMOUNT as decimal(19,2),",
				"          PRICINGDATE as date,",
				"          PRICEDETNEXCHANGERATE as decimal(22,5),",
				"          PRICINGSCALEQUANTITYINBASEUNIT as decimal(20,3),",
				"          TAXAMOUNT as decimal(19,2),",
				"          COSTAMOUNT as decimal(19,2),",
				"          SUBTOTAL1AMOUNT as decimal(19,2),",
				"          SUBTOTAL2AMOUNT as decimal(19,2),",
				"          SUBTOTAL3AMOUNT as decimal(19,2),",
				"          SUBTOTAL4AMOUNT as decimal(19,2),",
				"          SUBTOTAL5AMOUNT as decimal(19,2),",
				"          SUBTOTAL6AMOUNT as decimal(19,2),",
				"          STATISTICALVALUECONTROL as string,",
				"          STATISTICSEXCHANGERATE as decimal(22,5),",
				"          STATISTICSCURRENCY as integer,",
				"          SALESORGANIZATIONCURRENCY as integer,",
				"          ELIGIBLEAMOUNTFORCASHDISCOUNT as decimal(19,2),",
				"          CONTRACTACCOUNT as string,",
				"          CUSTOMERPAYMENTTERMS as string,",
				"          PAYMENTMETHOD as string,",
				"          PAYMENTREFERENCE as string,",
				"          FIXEDVALUEDATE as date,",
				"          ADDITIONALVALUEDAYS as integer,",
				"          PAYERPARTY as string,",
				"          COMPANYCODE as string,",
				"          FISCALYEAR as integer,",
				"          FISCALPERIOD as integer,",
				"          CUSTOMERACCOUNTASSIGNMENTGROUP as string,",
				"          BUSINESSAREA as string,",
				"          PROFITCENTER as string,",
				"          ORDERID as string,",
				"          WBSELEMENTINTERNALID as integer,",
				"          CONTROLLINGAREA as string,",
				"          ACCOUNTINGDOCUMENT as string,",
				"          PROFITABILITYSEGMENT as integer,",
				"          PROFITABILITYSEGMENT_2 as string,",
				"          COSTCENTER as string,",
				"          ORIGINSDDOCUMENT as string,",
				"          ORIGINSDDOCUMENTITEM as integer,",
				"          PRICEDETNEXCHANGERATEDATE as date,",
				"          EXCHANGERATETYPE as string,",
				"          FISCALYEARVARIANT as string,",
				"          CURRENCY as integer,",
				"          ACCOUNTINGEXCHANGERATE as decimal(22,5),",
				"          ACCOUNTINGEXCHANGERATEISSET as string,",
				"          REFERENCESDDOCUMENT as string,",
				"          REFERENCESDDOCUMENTITEM as integer,",
				"          REFERENCESDDOCUMENTCATEGORY as string,",
				"          SALESDOCUMENT as string,",
				"          SALESDOCUMENTITEM as integer,",
				"          SALESSDDOCUMENTCATEGORY as string,",
				"          HIGHERLEVELITEM as integer,",
				"          BILLINGDOCUMENTITEMINPARTSGMT as integer,",
				"          SALESGROUP as string,",
				"          ADDITIONALCUSTOMERGROUP1 as string,",
				"          ADDITIONALCUSTOMERGROUP2 as string,",
				"          ADDITIONALCUSTOMERGROUP3 as string,",
				"          ADDITIONALCUSTOMERGROUP4 as string,",
				"          ADDITIONALCUSTOMERGROUP5 as string,",
				"          SDDOCUMENTREASON as string,",
				"          ITEMISRELEVANTFORCREDIT as string,",
				"          CREDITRELATEDPRICE as decimal(19,2),",
				"          SALESDISTRICT as string,",
				"          CUSTOMERGROUP as string,",
				"          SOLDTOPARTY as string,",
				"          COUNTRY as string,",
				"          SHIPTOPARTY as string,",
				"          BILLTOPARTY as string,",
				"          SALESEMPLOYEE as integer,",
				"          RESPONSIBLEEMPLOYEE as integer,",
				"          SHIPPINGPOINT as string,",
				"          INCOTERMSVERSION as string,",
				"          INCOTERMSCLASSIFICATION as string,",
				"          INCOTERMSTRANSFERLOCATION as string,",
				"          INCOTERMSLOCATION1 as string,",
				"          INCOTERMSLOCATION2 as string,",
				"          SHIPPINGCONDITION as string,",
				"          OVERALLSDPROCESSSTATUS as string,",
				"          OVERALLBILLINGSTATUS as string,",
				"          ACCOUNTINGPOSTINGSTATUS as string,",
				"          ACCOUNTINGTRANSFERSTATUS as string,",
				"          BILLINGISSUETYPE as string,",
				"          INVOICELISTSTATUS as string,",
				"          OVRLITMGENERALINCOMPLETIONSTS as string,",
				"          OVERALLPRICINGINCOMPLETIONSTS as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/silver/','C_BILLINGDOCITEMBASICDEX_1'))) ~> BillingSilverSource",
				"source(output(",
				"          BILLINGDOCUMENT as string,",
				"          BILLINGDOCUMENTITEM as integer,",
				"          SALESDOCUMENTITEMCATEGORY as string,",
				"          SALESDOCUMENTITEMTYPE as string,",
				"          RETURNITEMPROCESSINGTYPE as string,",
				"          BILLINGDOCUMENTTYPE as string,",
				"          BILLINGDOCUMENTCATEGORY as string,",
				"          SDDOCUMENTCATEGORY as string,",
				"          CREATIONDATE as date,",
				"          CREATIONTIME as string,",
				"          LASTCHANGEDATE as date,",
				"          BILLINGDOCUMENTDATE as date,",
				"          BILLINGDOCUMENTISTEMPORARY as string,",
				"          ORGANIZATIONDIVISION as string,",
				"          DIVISION as string,",
				"          SALESOFFICE as string,",
				"          SALESORGANIZATION as string,",
				"          DISTRIBUTIONCHANNEL as string,",
				"          MATERIAL as string,",
				"          PRODUCT as string,",
				"          ORIGINALLYREQUESTEDMATERIAL as string,",
				"          INTERNATIONALARTICLENUMBER as string,",
				"          PRICINGREFERENCEMATERIAL as string,",
				"          BATCH as string,",
				"          MATERIALGROUP as string,",
				"          PRODUCTGROUP as string,",
				"          ADDITIONALMATERIALGROUP1 as string,",
				"          ADDITIONALMATERIALGROUP2 as string,",
				"          ADDITIONALMATERIALGROUP3 as string,",
				"          ADDITIONALMATERIALGROUP4 as string,",
				"          ADDITIONALMATERIALGROUP5 as string,",
				"          MATERIALCOMMISSIONGROUP as string,",
				"          PLANT as string,",
				"          STORAGELOCATION as string,",
				"          BILLINGDOCUMENTISCANCELLED as string,",
				"          CANCELLEDBILLINGDOCUMENT as string,",
				"          BILLINGDOCUMENTITEMTEXT as string,",
				"          SERVICESRENDEREDDATE as date,",
				"          BILLINGQUANTITY as decimal(20,3),",
				"          BILLINGQUANTITYUNIT as integer,",
				"          BILLINGQUANTITYINBASEUNIT as decimal(20,3),",
				"          BASEUNIT as integer,",
				"          MRPREQUIREDQUANTITYINBASEUNIT as decimal(20,3),",
				"          BILLINGTOBASEQUANTITYDNMNTR as decimal(5,0),",
				"          BILLINGTOBASEQUANTITYNMRTR as decimal(5,0),",
				"          ITEMGROSSWEIGHT as decimal(20,3),",
				"          ITEMNETWEIGHT as decimal(20,3),",
				"          ITEMWEIGHTUNIT as integer,",
				"          ITEMVOLUME as decimal(20,3),",
				"          ITEMVOLUMEUNIT as integer,",
				"          BILLTOPARTYCOUNTRY as string,",
				"          BILLTOPARTYREGION as string,",
				"          BILLINGPLANRULE as string,",
				"          BILLINGPLAN as string,",
				"          BILLINGPLANITEM as integer,",
				"          CUSTOMERPRICEGROUP as string,",
				"          PRICELISTTYPE as string,",
				"          TAXDEPARTURECOUNTRY as string,",
				"          VATREGISTRATION as string,",
				"          VATREGISTRATIONCOUNTRY as string,",
				"          VATREGISTRATIONORIGIN as string,",
				"          CUSTOMERTAXCLASSIFICATION1 as string,",
				"          CUSTOMERTAXCLASSIFICATION2 as string,",
				"          CUSTOMERTAXCLASSIFICATION3 as string,",
				"          CUSTOMERTAXCLASSIFICATION4 as string,",
				"          CUSTOMERTAXCLASSIFICATION5 as string,",
				"          CUSTOMERTAXCLASSIFICATION6 as string,",
				"          CUSTOMERTAXCLASSIFICATION7 as string,",
				"          CUSTOMERTAXCLASSIFICATION8 as string,",
				"          CUSTOMERTAXCLASSIFICATION9 as string,",
				"          SDPRICINGPROCEDURE as string,",
				"          NETAMOUNT as decimal(19,2),",
				"          TRANSACTIONCURRENCY as integer,",
				"          GROSSAMOUNT as decimal(19,2),",
				"          PRICINGDATE as date,",
				"          PRICEDETNEXCHANGERATE as decimal(22,5),",
				"          PRICINGSCALEQUANTITYINBASEUNIT as decimal(20,3),",
				"          TAXAMOUNT as decimal(19,2),",
				"          COSTAMOUNT as decimal(19,2),",
				"          SUBTOTAL1AMOUNT as decimal(19,2),",
				"          SUBTOTAL2AMOUNT as decimal(19,2),",
				"          SUBTOTAL3AMOUNT as decimal(19,2),",
				"          SUBTOTAL4AMOUNT as decimal(19,2),",
				"          SUBTOTAL5AMOUNT as decimal(19,2),",
				"          SUBTOTAL6AMOUNT as decimal(19,2),",
				"          STATISTICALVALUECONTROL as string,",
				"          STATISTICSEXCHANGERATE as decimal(22,5),",
				"          STATISTICSCURRENCY as integer,",
				"          SALESORGANIZATIONCURRENCY as integer,",
				"          ELIGIBLEAMOUNTFORCASHDISCOUNT as decimal(19,2),",
				"          CONTRACTACCOUNT as string,",
				"          CUSTOMERPAYMENTTERMS as string,",
				"          PAYMENTMETHOD as string,",
				"          PAYMENTREFERENCE as string,",
				"          FIXEDVALUEDATE as date,",
				"          ADDITIONALVALUEDAYS as integer,",
				"          PAYERPARTY as string,",
				"          COMPANYCODE as string,",
				"          FISCALYEAR as integer,",
				"          FISCALPERIOD as integer,",
				"          CUSTOMERACCOUNTASSIGNMENTGROUP as string,",
				"          BUSINESSAREA as string,",
				"          PROFITCENTER as string,",
				"          ORDERID as string,",
				"          WBSELEMENTINTERNALID as integer,",
				"          CONTROLLINGAREA as string,",
				"          ACCOUNTINGDOCUMENT as string,",
				"          PROFITABILITYSEGMENT as integer,",
				"          PROFITABILITYSEGMENT_2 as string,",
				"          COSTCENTER as string,",
				"          ORIGINSDDOCUMENT as string,",
				"          ORIGINSDDOCUMENTITEM as integer,",
				"          PRICEDETNEXCHANGERATEDATE as date,",
				"          EXCHANGERATETYPE as string,",
				"          FISCALYEARVARIANT as string,",
				"          CURRENCY as integer,",
				"          ACCOUNTINGEXCHANGERATE as decimal(22,5),",
				"          ACCOUNTINGEXCHANGERATEISSET as string,",
				"          REFERENCESDDOCUMENT as string,",
				"          REFERENCESDDOCUMENTITEM as integer,",
				"          REFERENCESDDOCUMENTCATEGORY as string,",
				"          SALESDOCUMENT as string,",
				"          SALESDOCUMENTITEM as integer,",
				"          SALESSDDOCUMENTCATEGORY as string,",
				"          HIGHERLEVELITEM as integer,",
				"          BILLINGDOCUMENTITEMINPARTSGMT as integer,",
				"          SALESGROUP as string,",
				"          ADDITIONALCUSTOMERGROUP1 as string,",
				"          ADDITIONALCUSTOMERGROUP2 as string,",
				"          ADDITIONALCUSTOMERGROUP3 as string,",
				"          ADDITIONALCUSTOMERGROUP4 as string,",
				"          ADDITIONALCUSTOMERGROUP5 as string,",
				"          SDDOCUMENTREASON as string,",
				"          ITEMISRELEVANTFORCREDIT as string,",
				"          CREDITRELATEDPRICE as decimal(19,2),",
				"          SALESDISTRICT as string,",
				"          CUSTOMERGROUP as string,",
				"          SOLDTOPARTY as string,",
				"          COUNTRY as string,",
				"          SHIPTOPARTY as string,",
				"          BILLTOPARTY as string,",
				"          SALESEMPLOYEE as integer,",
				"          RESPONSIBLEEMPLOYEE as integer,",
				"          SHIPPINGPOINT as string,",
				"          INCOTERMSVERSION as string,",
				"          INCOTERMSCLASSIFICATION as string,",
				"          INCOTERMSTRANSFERLOCATION as string,",
				"          INCOTERMSLOCATION1 as string,",
				"          INCOTERMSLOCATION2 as string,",
				"          SHIPPINGCONDITION as string,",
				"          OVERALLSDPROCESSSTATUS as string,",
				"          OVERALLBILLINGSTATUS as string,",
				"          ACCOUNTINGPOSTINGSTATUS as string,",
				"          ACCOUNTINGTRANSFERSTATUS as string,",
				"          BILLINGISSUETYPE as string,",
				"          INVOICELISTSTATUS as string,",
				"          OVRLITMGENERALINCOMPLETIONSTS as string,",
				"          OVERALLPRICINGINCOMPLETIONSTS as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/silver/delete/','C_BILLINGDOCITEMBASICDEX_1'))) ~> BillingSilverSourceDelete",
				"source(output(",
				"          SALESORGANIZATION as string,",
				"          SALESORGANIZATIONCURRENCY as integer,",
				"          COMPANYCODE as string,",
				"          INTERCOMPANYBILLINGCUSTOMER as string,",
				"          ARGENTINADELIVERYDATEEVENT as string,",
				"          ADDRESSID as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_SALESORGANIZATION'))) ~> ISALESORGANIZATIONSource",
				"source(output(",
				"          PLANT as string,",
				"          PLANTNAME as string,",
				"          VALUATIONAREA as string,",
				"          PLANTCUSTOMER as string,",
				"          PLANTSUPPLIER as string,",
				"          FACTORYCALENDAR as string,",
				"          DEFAULTPURCHASINGORGANIZATION as string,",
				"          SALESORGANIZATION as string,",
				"          ADDRESSID as string,",
				"          PLANTCATEGORY as string,",
				"          DISTRIBUTIONCHANNEL as string,",
				"          DIVISION as string,",
				"          LANGUAGE as string,",
				"          ISMARKEDFORARCHIVING as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_PLANT'))) ~> IPLANTSource",
				"source(output(",
				"          COMPANYCODE as string,",
				"          FISCALYEAR as integer,",
				"          FISCALYEARSTARTDATE as date,",
				"          FISCALYEARENDDATE as date,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_FISCALYEARFORCOMPANYCODE'))) ~> IFISCALYEARFORCOMPANYCODESource",
				"source(output(",
				"          PRODUCT as string,",
				"          PRODUCTEXTERNALID as string,",
				"          PRODUCTOID as string,",
				"          PRODUCTTYPE as string,",
				"          CREATIONDATE as date,",
				"          CREATIONTIME as string,",
				"          CREATIONDATETIME as decimal(28,7),",
				"          CREATEDBYUSER as string,",
				"          LASTCHANGEDATE as date,",
				"          LASTCHANGEDBYUSER as string,",
				"          ISMARKEDFORDELETION as string,",
				"          CROSSPLANTSTATUS as string,",
				"          CROSSPLANTSTATUSVALIDITYDATE as date,",
				"          PRODUCTOLDID as string,",
				"          GROSSWEIGHT as decimal(20,3),",
				"          PURCHASEORDERQUANTITYUNIT as integer,",
				"          SOURCEOFSUPPLY as string,",
				"          WEIGHTUNIT as integer,",
				"          COUNTRYOFORIGIN as string,",
				"          COMPETITORID as string,",
				"          PRODUCTGROUP as string,",
				"          BASEUNIT as integer,",
				"          ITEMCATEGORYGROUP as string,",
				"          NETWEIGHT as decimal(20,3),",
				"          PRODUCTHIERARCHY as string,",
				"          DIVISION as string,",
				"          VARBLPURORDUNITISACTIVE as string,",
				"          VOLUMEUNIT as integer,",
				"          MATERIALVOLUME as decimal(20,3),",
				"          SALESSTATUS as string,",
				"          TRANSPORTATIONGROUP as string,",
				"          SALESSTATUSVALIDITYDATE as date,",
				"          AUTHORIZATIONGROUP as string,",
				"          ANPCODE as integer,",
				"          PRODUCTCATEGORY as string,",
				"          BRAND as string,",
				"          PROCUREMENTRULE as string,",
				"          VALIDITYSTARTDATE as date,",
				"          LOWLEVELCODE as string,",
				"          PRODNOINGENPRODINPREPACKPROD as string,",
				"          SERIALIDENTIFIERASSGMTPROFILE as string,",
				"          SIZEORDIMENSIONTEXT as string,",
				"          INDUSTRYSTANDARDNAME as string,",
				"          PRODUCTSTANDARDID as string,",
				"          INTERNATIONALARTICLENUMBERCAT as string,",
				"          PRODUCTISCONFIGURABLE as string,",
				"          ISBATCHMANAGEMENTREQUIRED as string,",
				"          HASEMPTIESBOM as string,",
				"          EXTERNALPRODUCTGROUP as string,",
				"          CROSSPLANTCONFIGURABLEPRODUCT as string,",
				"          SERIALNOEXPLICITNESSLEVEL as string,",
				"          PRODUCTMANUFACTURERNUMBER as string,",
				"          MANUFACTURERNUMBER as string,",
				"          MANUFACTURERPARTPROFILE as string,",
				"          QLTYMGMTINPROCMTISACTIVE as string,",
				"          ISAPPROVEDBATCHRECORDREQD as string,",
				"          HANDLINGINDICATOR as string,",
				"          WAREHOUSEPRODUCTGROUP as string,",
				"          WAREHOUSESTORAGECONDITION as string,",
				"          STANDARDHANDLINGUNITTYPE as string,",
				"          SERIALNUMBERPROFILE as string,",
				"          ADJUSTMENTPROFILE as string,",
				"          PREFERREDUNITOFMEASURE as integer,",
				"          ISPILFERABLE as string,",
				"          ISRELEVANTFORHZDSSUBSTANCES as string,",
				"          QUARANTINEPERIOD as decimal(17,0),",
				"          TIMEUNITFORQUARANTINEPERIOD as integer,",
				"          QUALITYINSPECTIONGROUP as string,",
				"          HANDLINGUNITTYPE as string,",
				"          HASVARIABLETAREWEIGHT as string,",
				"          MAXIMUMPACKAGINGLENGTH as decimal(20,3),",
				"          MAXIMUMPACKAGINGWIDTH as decimal(20,3),",
				"          MAXIMUMPACKAGINGHEIGHT as decimal(20,3),",
				"          MAXIMUMCAPACITY as decimal(20,3),",
				"          OVERCAPACITYTOLERANCE as decimal(18,1),",
				"          UNITFORMAXPACKAGINGDIMENSIONS as integer,",
				"          BASEUNITSPECIFICPRODUCTLENGTH as decimal(20,3),",
				"          BASEUNITSPECIFICPRODUCTWIDTH as decimal(20,3),",
				"          BASEUNITSPECIFICPRODUCTHEIGHT as decimal(20,3),",
				"          PRODUCTMEASUREMENTUNIT as integer,",
				"          PRODUCTVALIDSTARTDATE as date,",
				"          ARTICLECATEGORY as string,",
				"          CONTENTUNIT as integer,",
				"          NETCONTENT as decimal(20,3),",
				"          COMPARISONPRICEQUANTITY as decimal(5,0),",
				"          GROSSCONTENT as decimal(20,3),",
				"          PRODUCTVALIDENDDATE as date,",
				"          ASSORTMENTLISTTYPE as string,",
				"          HASTEXTILEPARTSWTHANIMALORIGIN as string,",
				"          PRODUCTSEASONUSAGECATEGORY as string,",
				"          INDUSTRYSECTOR as string,",
				"          CHANGENUMBER as string,",
				"          MATERIALREVISIONLEVEL as string,",
				"          ISACTIVEENTITY as string,",
				"          LASTCHANGEDATETIME as decimal(28,7),",
				"          LASTCHANGETIME as string,",
				"          DANGEROUSGOODSINDPROFILE as string,",
				"          PRODUCTUUID as binary,",
				"          PRODSUPCHNMGMTUUID22 as string,",
				"          PRODUCTDOCUMENTCHANGENUMBER as string,",
				"          PRODUCTDOCUMENTPAGECOUNT as integer,",
				"          PRODUCTDOCUMENTPAGENUMBER as string,",
				"          OWNINVENTORYMANAGEDPRODUCT as string,",
				"          DOCUMENTISCREATEDBYCAD as string,",
				"          PRODUCTIONORINSPECTIONMEMOTXT as string,",
				"          PRODUCTIONMEMOPAGEFORMAT as string,",
				"          GLOBALTRADEITEMNUMBERVARIANT as string,",
				"          PRODUCTISHIGHLYVISCOUS as string,",
				"          TRANSPORTISINBULK as string,",
				"          PRODALLOCDETNPROCEDURE as string,",
				"          PRODEFFCTYPARAMVALSAREASSIGNED as string,",
				"          PRODISENVIRONMENTALLYRELEVANT as string,",
				"          LABORATORYORDESIGNOFFICE as string,",
				"          PACKAGINGMATERIALGROUP as string,",
				"          PRODUCTISLOCKED as string,",
				"          DISCOUNTINKINDELIGIBILITY as string,",
				"          SMARTFORMNAME as string,",
				"          PACKINGREFERENCEPRODUCT as string,",
				"          BASICMATERIAL as string,",
				"          PRODUCTDOCUMENTNUMBER as string,",
				"          PRODUCTDOCUMENTVERSION as string,",
				"          PRODUCTDOCUMENTTYPE as string,",
				"          PRODUCTDOCUMENTPAGEFORMAT as string,",
				"          PRODUCTCONFIGURATION as integer,",
				"          SEGMENTATIONSTRATEGY as string,",
				"          SEGMENTATIONISRELEVANT as string,",
				"          ISCHEMICALCOMPLIANCERELEVANT as string,",
				"          MANUFACTURERBOOKPARTNUMBER as string,",
				"          LOGISTICALPRODUCTCATEGORY as string,",
				"          SALESPRODUCT as string,",
				"          PRODCHARC1INTERNALNUMBER as integer,",
				"          PRODCHARC2INTERNALNUMBER as integer,",
				"          PRODCHARC3INTERNALNUMBER as integer,",
				"          PRODUCTCHARACTERISTIC1 as string,",
				"          PRODUCTCHARACTERISTIC2 as string,",
				"          PRODUCTCHARACTERISTIC3 as string,",
				"          DFSAMMUNITIONGROUPCODE as string,",
				"          DFSRICIDENTIFIER as long,",
				"          DFSPRODUCTSENSITIVITY as string,",
				"          DFSMANUFACTURERPARTLONGNUMBER as string,",
				"          DFSMATLCONDITIONMGMT as string,",
				"          DFSRETURNDELIVERY as string,",
				"          DFSLOGISTICSLEVEL as string,",
				"          DFSNATIONALITEMIDNNUMBER as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_PRODUCT'))) ~> IPRODUCTSource",
				"source(output(",
				"          CONTROLLINGAREA as string,",
				"          PROFITCENTER as string,",
				"          VALIDITYENDDATE as date,",
				"          PROFITCTRRESPONSIBLEPERSONNAME as string,",
				"          COMPANYCODE as string,",
				"          PROFITCTRRESPONSIBLEUSER as string,",
				"          VALIDITYSTARTDATE as date,",
				"          DEPARTMENT as string,",
				"          PROFITCENTERSTANDARDHIERARCHY as string,",
				"          SEGMENT as string,",
				"          PROFITCENTERISBLOCKED as string,",
				"          FORMULAPLANNINGTEMPLATE as string,",
				"          FORMOFADDRESS as string,",
				"          ADDRESSNAME as string,",
				"          ADDITIONALNAME as string,",
				"          PROFITCENTERADDRNAME3 as string,",
				"          PROFITCENTERADDRNAME4 as string,",
				"          STREETADDRESSNAME as string,",
				"          POBOX as string,",
				"          CITYNAME as string,",
				"          POSTALCODE as string,",
				"          POBOXPOSTALCODE as string,",
				"          DISTRICT as string,",
				"          COUNTRY as string,",
				"          REGION as string,",
				"          TAXJURISDICTION as string,",
				"          LANGUAGE as string,",
				"          PHONENUMBER1 as string,",
				"          PHONENUMBER2 as string,",
				"          TELEBOXNUMBER as string,",
				"          TELEXNUMBER as string,",
				"          FAXNUMBER as string,",
				"          TELETEXNUMBER as string,",
				"          DATACOMMUNICATIONPHONENUMBER as string,",
				"          PROFITCENTERPRINTERNAME as string,",
				"          PROFITCENTERCREATEDBYUSER as string,",
				"          PROFITCENTERCREATIONDATE as date,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer,",
				"          {_ISOLanguage} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_PROFITCENTER'))) ~> IPROFITCENTERSource",
				"source(output(",
				"          DISTRIBUTIONCHANNEL as string,",
				"          DISTRIBUTIONCHANNELOID as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_DISTRIBUTIONCHANNEL'))) ~> IDISTRIBUTIONCHANNELSource",
				"source(output(",
				"          DIVISION as string,",
				"          DIVISIONOID as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_DIVISION'))) ~> IDIVISIONSource",
				"source(output(",
				"          MANDT as string,",
				"          SHIPPINGPOINT as string,",
				"          ACTIVEDEPARTURECOUNTRY as string,",
				"          ADDRESSID as string,",
				"          PICKINGCONFIRMATION as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_SHIPPINGPOINT'))) ~> ISHIPPINGPOINTSource",
				"source(output(",
				"          CONTROLLINGAREA as string,",
				"          FISCALYEARVARIANT as string,",
				"          CONTROLLINGAREANAME as string,",
				"          CONTROLLINGAREACURRENCY as integer,",
				"          CHARTOFACCOUNTS as string,",
				"          COSTCENTERSTANDARDHIERARCHY as string,",
				"          OPERATINGCONCERN as string,",
				"          PROFITCENTERSTANDARDHIERARCHY as string,",
				"          BUSINESSPROCESSSTANDARDHIER as string,",
				"          CREDITDOWNPAYMENTDEFAULTGLACCT as string,",
				"          DEBITDOWNPAYMENTDEFAULTGLACCT as string,",
				"          CONTROLLINGAREACURRENCYROLE as string,",
				"          FINANCIALMANAGEMENTAREA as string,",
				"          CONTROLLINGAREARESPONSIBLEUSER as string,",
				"          DEFAULTPROFITCENTER as string,",
				"          CTRLGSTDFINSTATEMENTVERSION as string,",
				"          PROFITCENTERACCOUNTINGCURRENCY as integer,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_CONTROLLINGAREA'))) ~> ICONTROLLINGAREASource",
				"source(output(",
				"          PRODUCTGROUP as string,",
				"          AUTHORIZATIONGROUP as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_PRODUCTGROUP_2'))) ~> IPRODUCTGROUP2Source",
				"source(output(",
				"          PERSONWORKAGREEMENT as integer,",
				"          PERSON as string,",
				"          AUTHORIZATIONGROUP as string,",
				"          PERSONFULLNAME as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_PERSONWORKAGREEMENT_1'))) ~> IPERSONWORKAGREEMENT1Source",
				"source(output(",
				"          CONTROLLINGAREA as string,",
				"          COSTCENTER as string,",
				"          VALIDITYENDDATE as date,",
				"          VALIDITYSTARTDATE as date,",
				"          ISBLKDFORPRIMARYCOSTSPOSTING as string,",
				"          ISBLOCKEDFORPLANPRIMARYCOSTS as string,",
				"          COMPANYCODE as string,",
				"          BUSINESSAREA as string,",
				"          COSTCENTERCATEGORY as string,",
				"          COSTCTRRESPONSIBLEPERSONNAME as string,",
				"          COSTCTRRESPONSIBLEUSER as string,",
				"          COSTCENTERCURRENCY as string,",
				"          COSTINGSHEET as string,",
				"          TAXJURISDICTION as string,",
				"          PROFITCENTER as string,",
				"          PLANT as string,",
				"          LOGICALSYSTEM as string,",
				"          COSTCENTERCREATIONDATE as date,",
				"          COSTCENTERCREATEDBYUSER as string,",
				"          ISBLKDFORSECONDARYCOSTSPOSTING as string,",
				"          ISBLOCKEDFORREVENUEPOSTING as string,",
				"          ISBLOCKEDFORCOMMITMENTPOSTING as string,",
				"          ISBLOCKEDFORPLANSECONDARYCOSTS as string,",
				"          ISBLOCKEDFORPLANREVENUES as string,",
				"          COSTCENTERALLOCATIONMETHOD as string,",
				"          CONSUMPTIONQTYISRECORDED as string,",
				"          DEPARTMENT as string,",
				"          SUBSEQUENTCOSTCENTER as string,",
				"          CONDITIONUSAGE as string,",
				"          CONDITIONAPPLICATION as string,",
				"          COSTCENTERACCOUNTINGOVERHEAD as string,",
				"          COUNTRY as string,",
				"          FORMOFADDRESS as string,",
				"          ADDRESSNAME as string,",
				"          ADDRESSADDITIONALNAME as string,",
				"          COSTCENTERADDRNAME3 as string,",
				"          COSTCENTERADDRNAME4 as string,",
				"          CITYNAME as string,",
				"          DISTRICT as string,",
				"          STREETADDRESSNAME as string,",
				"          POBOX as string,",
				"          POSTALCODE as string,",
				"          POBOXPOSTALCODE as string,",
				"          REGION as string,",
				"          LANGUAGE as string,",
				"          TELEBOXNUMBER as string,",
				"          PHONENUMBER1 as string,",
				"          PHONENUMBER2 as string,",
				"          FAXNUMBER as string,",
				"          TELETEXNUMBER as string,",
				"          TELEXNUMBER as string,",
				"          DATACOMMUNICATIONPHONENUMBER as string,",
				"          COSTCENTERPRINTERDESTINATION as string,",
				"          COSTCENTERSTANDARDHIERAREA as string,",
				"          COSTCOLLECTOR as string,",
				"          COSTCENTERISCOMPLETE as string,",
				"          ISSTATISTICALCOSTCENTER as string,",
				"          OBJECTINTERNALID as string,",
				"          COSTCENTERFUNCTION as string,",
				"          COSTCENTERALTERNATIVEFUNCTION as string,",
				"          FUNCTIONALAREA as string,",
				"          ACTYINDEPFORMULAPLANNINGTMPL as string,",
				"          ACTYDEPDNTFORMULAPLANNINGTMPL as string,",
				"          ACTYINDEPENDENTALLOCATIONTMPL as string,",
				"          ACTYDEPENDENTALLOCATIONTMPL as string,",
				"          ACTLINDEPSTATISTICALKEYFIGURES as string,",
				"          ACTLDEPSTATISTICALKEYFIGURES as string,",
				"          JOINTVENTURE as string,",
				"          JOINTVENTURERECOVERYCODE as string,",
				"          JOINTVENTUREEQUITYTYPE as string,",
				"          JOINTVENTUREOBJECTTYPE as string,",
				"          JOINTVENTURECLASS as string,",
				"          JOINTVENTURESUBCLASS as string,",
				"          BUDGETCARRYINGCOSTCENTER as string,",
				"          AVAILABILITYCONTROLPROFILE as string,",
				"          AVAILABILITYCONTROLISACTIVE as string,",
				"          FUND as string,",
				"          GRANTID as string,",
				"          FUNDISFIXASSIGNED as string,",
				"          GRANTIDISFIXASSIGNED as string,",
				"          FUNCTIONALAREAISFIXASSIGNED as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer,",
				"          {_ISOLanguage} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_COSTCENTER'))) ~> ICOSTCENTERSource",
				"source(output(",
				"          COMPANYCODE as string,",
				"          COMPANYCODENAME as string,",
				"          CITYNAME as string,",
				"          COUNTRY as string,",
				"          CURRENCY as integer,",
				"          LANGUAGE as string,",
				"          CHARTOFACCOUNTS as string,",
				"          FISCALYEARVARIANT as string,",
				"          COMPANY as string,",
				"          CREDITCONTROLAREA as string,",
				"          COUNTRYCHARTOFACCOUNTS as string,",
				"          FINANCIALMANAGEMENTAREA as string,",
				"          ADDRESSID as string,",
				"          TAXABLEENTITY as string,",
				"          VATREGISTRATION as string,",
				"          EXTENDEDWHLDGTAXISACTIVE as string,",
				"          CONTROLLINGAREA as string,",
				"          FIELDSTATUSVARIANT as string,",
				"          NONTAXABLETRANSACTIONTAXCODE as string,",
				"          DOCDATEISUSEDFORTAXDETN as string,",
				"          TAXRPTGDATEISACTIVE as string,",
				"          CASHDISCOUNTBASEAMTISNETAMT as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_COMPANYCODE'))) ~> ICOMPANYCODESource",
				"source(output(",
				"          BUSINESSAREA as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_BUSINESSAREA'))) ~> IBUSINESSAREASource",
				"source(output(",
				"          CUSTOMER as string,",
				"          CUSTOMERNAME as string,",
				"          CUSTOMERFULLNAME as string,",
				"          CREATEDBYUSER as string,",
				"          CREATIONDATE as date,",
				"          ADDRESSID as string,",
				"          CUSTOMERCLASSIFICATION as string,",
				"          VATREGISTRATION as string,",
				"          CUSTOMERACCOUNTGROUP as string,",
				"          AUTHORIZATIONGROUP as string,",
				"          DELIVERYISBLOCKED as string,",
				"          POSTINGISBLOCKED as string,",
				"          BILLINGISBLOCKEDFORCUSTOMER as string,",
				"          ORDERISBLOCKEDFORCUSTOMER as string,",
				"          INTERNATIONALLOCATIONNUMBER1 as integer,",
				"          ISONETIMEACCOUNT as string,",
				"          TAXJURISDICTION as string,",
				"          INDUSTRY as string,",
				"          TAXNUMBERTYPE as string,",
				"          TAXNUMBER1 as string,",
				"          TAXNUMBER2 as string,",
				"          TAXNUMBER3 as string,",
				"          TAXNUMBER4 as string,",
				"          TAXNUMBER5 as string,",
				"          TAXNUMBER6 as string,",
				"          CUSTOMERCORPORATEGROUP as string,",
				"          SUPPLIER as string,",
				"          NIELSENREGION as string,",
				"          INDUSTRYCODE1 as string,",
				"          INDUSTRYCODE2 as string,",
				"          INDUSTRYCODE3 as string,",
				"          INDUSTRYCODE4 as string,",
				"          INDUSTRYCODE5 as string,",
				"          COUNTRY as string,",
				"          ORGANIZATIONBPNAME1 as string,",
				"          ORGANIZATIONBPNAME2 as string,",
				"          CITYNAME as string,",
				"          POSTALCODE as string,",
				"          STREETNAME as string,",
				"          SORTFIELD as string,",
				"          FAXNUMBER as string,",
				"          BR_SUFRAMACODE as string,",
				"          REGION as string,",
				"          TELEPHONENUMBER1 as string,",
				"          TELEPHONENUMBER2 as string,",
				"          ALTERNATIVEPAYERACCOUNT as string,",
				"          DATAMEDIUMEXCHANGEINDICATOR as string,",
				"          VATLIABILITY as string,",
				"          ISBUSINESSPURPOSECOMPLETED as string,",
				"          RESPONSIBLETYPE as string,",
				"          FISCALADDRESS as string,",
				"          NFPARTNERISNATURALPERSON as string,",
				"          DELETIONINDICATOR as string,",
				"          LANGUAGE as string,",
				"          TRADINGPARTNER as string,",
				"          DELIVERYDATETYPERULE as string,",
				"          EXPRESSTRAINSTATIONNAME as string,",
				"          TRAINSTATIONNAME as string,",
				"          INTERNATIONALLOCATIONNUMBER2 as integer,",
				"          INTERNATIONALLOCATIONNUMBER3 as integer,",
				"          CITYCODE as string,",
				"          COUNTY as string,",
				"          CUSTOMERHASUNLOADINGPOINT as string,",
				"          CUSTOMERWORKINGTIMECALENDAR as string,",
				"          ISCOMPETITOR as string,",
				"          TAXINVOICEREPRESENTATIVENAME as string,",
				"          BUSINESSTYPE as string,",
				"          INDUSTRYTYPE as string,",
				"          TW_COLLVBILLINGISSUPPORTED as string,",
				"          ALTERNATIVEPAYEEISALLOWED as string,",
				"          FREEDEFINEDATTRIBUTE01 as string,",
				"          FREEDEFINEDATTRIBUTE02 as string,",
				"          FREEDEFINEDATTRIBUTE03 as string,",
				"          FREEDEFINEDATTRIBUTE04 as string,",
				"          FREEDEFINEDATTRIBUTE05 as string,",
				"          FREEDEFINEDATTRIBUTE06 as string,",
				"          FREEDEFINEDATTRIBUTE07 as string,",
				"          FREEDEFINEDATTRIBUTE08 as string,",
				"          FREEDEFINEDATTRIBUTE09 as string,",
				"          FREEDEFINEDATTRIBUTE10 as string,",
				"          PAYMENTREASON as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_CUSTOMER'))) ~> ICUSTOMERSource",
				"source(output(",
				"          FISCALYEARVARIANT as string,",
				"          FISCALYEAR as integer,",
				"          FISCALPERIOD as integer,",
				"          FISCALPERIODSTARTDATE as date,",
				"          FISCALPERIODENDDATE as date,",
				"          ISSPECIALPERIOD as string,",
				"          FISCALYEARSTARTDATE as date,",
				"          FISCALYEARENDDATE as date,",
				"          FISCALYEARPERIOD as integer,",
				"          NEXTFISCALPERIOD as integer,",
				"          NEXTFISCALPERIODFISCALYEAR as integer,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_FISCALPERIODFORVARIANT'))) ~> IFISCALPERIODFORVARIANTSource",
				"source(output(",
				"          OVERALLBILLINGSTATUS as string,",
				"          DOMAINVALUE as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_OVERALLBILLINGSTATUS'))) ~> IOVERALLBILLINGSTATUSSource",
				"source(output(",
				"          MANDT as string,",
				"          BILLINGDOCUMENTTYPE as string,",
				"          SDDOCUMENTCATEGORY as string,",
				"          INCREMENTITEMNUMBER as integer,",
				"          BILLINGDOCUMENTCATEGORY as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_BILLINGDOCUMENTTYPE'))) ~> IBILLINGDOCUMENTTYPESource",
				"source(output(",
				"          CUSTOMERGROUP as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          Key as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','I_CUSTOMERGROUP'))) ~> ICUSTOMERGROUPSource",
				"source(output(",
				"          CDSViewName as string,",
				"          inScope as boolean,",
				"          systemName as string,",
				"          checkpointId as string,",
				"          maxId as long,",
				"          lastProcessedTimestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"SELECT * FROM dbo.extractionScope WHERE CDSViewName = \\'\" + $p_name + \"\\'\"),",
				"     format: 'query') ~> getTimestamp",
				"BillingSilverSource, selectLastProcessedTimestampPerSystem join(toTimestamp(byName('_UpdateTimeStamp')) > lastProcessedTimestamp,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> GetRecordsWithMaxTimeStampOnly",
				"AddKeyColumns alterRow(deleteIf(true())) ~> AllowDelete",
				"ReplaceNULLDimensions alterRow(upsertIf(true())) ~> AllowUpsert",
				"AddKeyIFISCALPERIODFORVARIANT, IPLANTSource join(AddKeyIFISCALPERIODFORVARIANT@PLANT == IPLANTSource@PLANT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> JoinWithIPLANT",
				"AddKeyIPLANT, ISALESORGANIZATIONSource join(AddKeyIPLANT@SALESORGANIZATION == ISALESORGANIZATIONSource@SALESORGANIZATION,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithISALESORGANIZATION",
				"AddKeyISALESORGANIZATION, distinctIPROFITCENTER join(AddKeyISALESORGANIZATION@PROFITCENTER == distinctIPROFITCENTER@PROFITCENTER",
				"     && AddKeyISALESORGANIZATION@CONTROLLINGAREA == distinctIPROFITCENTER@CONTROLLINGAREA,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIPROFITCENTER",
				"AddKeyIPROFITCENTER, IDISTRIBUTIONCHANNELSource join(AddKeyIPROFITCENTER@DISTRIBUTIONCHANNEL == IDISTRIBUTIONCHANNELSource@DISTRIBUTIONCHANNEL,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIDISTRIBUTIONCHANNEL",
				"AddKeyIDISTRIBUTIONCHANNEL, IDIVISIONSource join(AddKeyIDISTRIBUTIONCHANNEL@DIVISION == IDIVISIONSource@DIVISION,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIDIVISION",
				"AddKeyIDIVISION, ISHIPPINGPOINTSource join(AddKeyIDIVISION@SHIPPINGPOINT == ISHIPPINGPOINTSource@SHIPPINGPOINT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithISHIPPINGPOINT",
				"AddKeyISHIPPINGPOINT, ICONTROLLINGAREASource join(AddKeyISHIPPINGPOINT@CONTROLLINGAREA == ICONTROLLINGAREASource@CONTROLLINGAREA,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithICONTROLLINGAREA",
				"AddKeyICONTROLLINGAREA, IPRODUCTGROUP2Source join(AddKeyICONTROLLINGAREA@PRODUCTGROUP == IPRODUCTGROUP2Source@PRODUCTGROUP,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIPRODUCTGROUP2",
				"AddKeyIPRODUCTGROUP2, distinctICOSTCENTER join(AddKeyIPRODUCTGROUP2@COSTCENTER == distinctICOSTCENTER@COSTCENTER",
				"     && AddKeyIPRODUCTGROUP2@CONTROLLINGAREA == distinctICOSTCENTER@CONTROLLINGAREA,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithICOSTCENTER",
				"AddKeyICOSTCENTER, ICOMPANYCODESource join(AddKeyICOSTCENTER@COMPANYCODE == ICOMPANYCODESource@COMPANYCODE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithICOMPANYCODE",
				"AddKeyICOMPANYCODE, IPRODUCTSource join(AddKeyICOMPANYCODE@PRODUCT == IPRODUCTSource@PRODUCT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIPRODUCT",
				"JoinWithIPLANT select(mapColumn(",
				"          {_key_IPLANT} = Key,",
				"          each(match(stream==\"AddKeyIFISCALPERIODFORVARIANT\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIPLANT",
				"JoinWithISALESORGANIZATION select(mapColumn(",
				"          {_key_ISALESORGANIZATION} = Key,",
				"          each(match(stream==\"AddKeyIPLANT\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyISALESORGANIZATION",
				"JoinWithIPROFITCENTER select(mapColumn(",
				"          {_key_IPROFITCENTER} = Key,",
				"          each(match(stream==\"AddKeyISALESORGANIZATION\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIPROFITCENTER",
				"JoinWithIDISTRIBUTIONCHANNEL select(mapColumn(",
				"          {_key_IDISTRIBUTIONCHANNEL} = Key,",
				"          each(match(stream==\"AddKeyIPROFITCENTER\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIDISTRIBUTIONCHANNEL",
				"JoinWithIDIVISION select(mapColumn(",
				"          {_key_IDIVISION} = Key,",
				"          each(match(stream==\"AddKeyIDISTRIBUTIONCHANNEL\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIDIVISION",
				"JoinWithISHIPPINGPOINT select(mapColumn(",
				"          {_key_ISHIPPINGPOINT} = Key,",
				"          each(match(stream==\"AddKeyIDIVISION\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyISHIPPINGPOINT",
				"JoinWithICONTROLLINGAREA select(mapColumn(",
				"          {_key_ICONTROLLINGAREA} = Key,",
				"          each(match(stream==\"AddKeyISHIPPINGPOINT\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyICONTROLLINGAREA",
				"JoinWithIPRODUCTGROUP2 select(mapColumn(",
				"          {_key_IPRODUCTGROUP2} = Key,",
				"          each(match(stream==\"AddKeyICONTROLLINGAREA\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIPRODUCTGROUP2",
				"JoinWithICOSTCENTER select(mapColumn(",
				"          {_key_ICOSTCENTER} = Key,",
				"          each(match(stream==\"AddKeyIPRODUCTGROUP2\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyICOSTCENTER",
				"JoinWithICOMPANYCODE select(mapColumn(",
				"          {_key_ICOMPANYCODE} = Key,",
				"          each(match(stream==\"AddKeyICOSTCENTER\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyICOMPANYCODE",
				"JoinWithIPRODUCT select(mapColumn(",
				"          {_key_IPRODUCT} = Key,",
				"          each(match(stream==\"AddKeyICOMPANYCODE\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIPRODUCT",
				"AddKeyIPRODUCT, IPERSONWORKAGREEMENT1Source join(SALESEMPLOYEE == PERSONWORKAGREEMENT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIPERSONWORKAGREEMENT1",
				"JoinWithIPERSONWORKAGREEMENT1 select(mapColumn(",
				"          {_key_IPERSONWORKAGREEMENT1} = Key,",
				"          each(match(stream==\"AddKeyIPRODUCT\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIPERSONWORKAGREEMENT1",
				"AddKeyIPERSONWORKAGREEMENT1, IBUSINESSAREASource join(AddKeyIPERSONWORKAGREEMENT1@BUSINESSAREA == IBUSINESSAREASource@BUSINESSAREA,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIBUSINESSAREA",
				"JoinWithIBUSINESSAREA select(mapColumn(",
				"          {_key_IBUSINESSAREA} = Key,",
				"          each(match(stream==\"AddKeyIPERSONWORKAGREEMENT1\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIBUSINESSAREA",
				"AddKeyIBUSINESSAREA, ICUSTOMERSource join(PAYERPARTY == CUSTOMER,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithICUSTOMERPayerParty",
				"JoinWithICUSTOMERPayerParty select(mapColumn(",
				"          {_key_ICUSTOMERPayerParty} = Key,",
				"          each(match(stream==\"AddKeyIBUSINESSAREA\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyICUSTOMERPayerParty",
				"AddKeyICUSTOMERPayerParty, ICUSTOMERSource join(SOLDTOPARTY == CUSTOMER,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithICUSTOMERSoldToParty",
				"JoinWithICUSTOMERSoldToParty select(mapColumn(",
				"          {_key_ICUSTOMERPSoldToParty} = Key,",
				"          each(match(stream==\"AddKeyICUSTOMERPayerParty\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyICUSTOMERSoldToParty",
				"AddKeyICUSTOMERSoldToParty, ICUSTOMERSource join(BILLTOPARTY == CUSTOMER,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithICUSTOMERBillToParty",
				"JoinWithICUSTOMERBillToParty select(mapColumn(",
				"          {_key_ICUSTOMERPBillToParty} = Key,",
				"          each(match(stream==\"AddKeyICUSTOMERSoldToParty\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyICUSTOMERBillToParty",
				"AddKeyICUSTOMERBillToParty, ICUSTOMERSource join(SHIPTOPARTY == CUSTOMER,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithICUSTOMERShipToParty",
				"JoinWithICUSTOMERShipToParty select(mapColumn(",
				"          {_key_ICUSTOMERPShipToParty} = Key,",
				"          each(match(stream==\"AddKeyICUSTOMERBillToParty\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyICUSTOMERPShipToParty",
				"IFISCALPERIODFORVARIANTSource filter(isNull(ISSPECIALPERIOD)) ~> IFISCALPERIODFORVARIANTFilter",
				"GetRecordsWithMaxTimeStampOnly, IFISCALPERIODFORVARIANTFilter join(BillingSilverSource@FISCALYEARVARIANT == IFISCALPERIODFORVARIANTSource@FISCALYEARVARIANT",
				"     && BILLINGDOCUMENTDATE >= FISCALPERIODSTARTDATE",
				"     && BILLINGDOCUMENTDATE <= FISCALPERIODENDDATE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> JoinWithIFISCALPERIODFORVARIANT",
				"JoinWithIFISCALPERIODFORVARIANT select(mapColumn(",
				"          FISCALYEAR = IFISCALPERIODFORVARIANTSource@FISCALYEAR,",
				"          FISCALPERIOD = IFISCALPERIODFORVARIANTSource@FISCALPERIOD,",
				"          each(match(stream==\"BillingSilverSource\"),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIFISCALPERIODFORVARIANT",
				"AddKeyICUSTOMERPShipToParty, IOVERALLBILLINGSTATUSSource join(coalesce(AddKeyICUSTOMERPShipToParty@OVERALLBILLINGSTATUS, \"\") == coalesce(IOVERALLBILLINGSTATUSSource@OVERALLBILLINGSTATUS,\"\")",
				"     && AddKeyICUSTOMERPShipToParty@{_SystemName} == IOVERALLBILLINGSTATUSSource@{_SystemName},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIOVERALLBILLINGSTATUS",
				"JoinWithIOVERALLBILLINGSTATUS select(mapColumn(",
				"          {_key_OVERALLBILLINGSTATUS} = Key,",
				"          each(match(stream==\"AddKeyICUSTOMERPShipToParty\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIOVERALLBILLINGSTATUS",
				"AddKeyIOVERALLBILLINGSTATUS, IBILLINGDOCUMENTTYPESource join(AddKeyIOVERALLBILLINGSTATUS@BILLINGDOCUMENTTYPE == IBILLINGDOCUMENTTYPESource@BILLINGDOCUMENTTYPE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithIBILLINGDOCUMENTTYPE",
				"JoinWithIBILLINGDOCUMENTTYPE select(mapColumn(",
				"          {_key_BILLINGDOCUMENTTYPE} = Key,",
				"          each(match(stream==\"AddKeyIOVERALLBILLINGSTATUS\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyIBILLINGDOCUMENTTYPE",
				"AddKeyIBILLINGDOCUMENTTYPE, ICUSTOMERGROUPSource join(AddKeyIBILLINGDOCUMENTTYPE@CUSTOMERGROUP == ICUSTOMERGROUPSource@CUSTOMERGROUP,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithICUSTOMERGROUP",
				"JoinWithICUSTOMERGROUP select(mapColumn(",
				"          {_key_ICUSTOMERGROUP} = Key,",
				"          each(match(stream==\"AddKeyIBILLINGDOCUMENTTYPE\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddKeyICUSTOMERPGROUP",
				"AddKeyICUSTOMERPGROUP derive(each(match(startsWith(name,'_key_')&&!in(['_key_IACCOUNTINGDOCUMENTTYPE','_key_IBILLINGBLOCKSTATUS','_key_IDELIVERYBLOCKSTATUS','_key_IOVERALLBILLINGSTATUS'],name)), $$ = coalesce($$, -1))) ~> ReplaceNULLDimensions",
				"getTimestamp filter(systemName == $p_systemName) ~> filterLastProcessedTimestampForSystem",
				"filterLastProcessedTimestampForSystem derive(lastProcessedTimestamp = coalesce(lastProcessedTimestamp, toTimestamp('1900-01-01 00:00:00'))) ~> setLastProcessedTimestamp",
				"setLastProcessedTimestamp select(mapColumn(",
				"          lastProcessedTimestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectLastProcessedTimestampPerSystem",
				"ICOSTCENTERSource select(mapColumn(",
				"          CONTROLLINGAREA,",
				"          COSTCENTER,",
				"          {_SystemName},",
				"          Key,",
				"          {_ISOLanguage}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectICOSTCENTER",
				"SelectICOSTCENTER aggregate(groupBy(mycols = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> distinctICOSTCENTER",
				"IPROFITCENTERSource select(mapColumn(",
				"          CONTROLLINGAREA,",
				"          PROFITCENTER,",
				"          {_SystemName},",
				"          Key,",
				"          {_ISOLanguage}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectIPROFITCENTER",
				"SelectIPROFITCENTER aggregate(groupBy(mycols = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> distinctIPROFITCENTER",
				"setRowToUpdateTimestamp alterRow(updateIf(true())) ~> allowUpdateLastProcessedTimestamp",
				"GetRecordsWithMaxTimeStampOnly aggregate(newMaxTimestamp = max(toTimestamp(byName('_UpdateTimeStamp')))) ~> getNewMaxTimestamp",
				"getNewMaxTimestamp, selectLastProcessedTimestampPerSystem join(true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> retrieveOldTimestamp",
				"retrieveOldTimestamp derive(CDSViewName = $p_name,",
				"          systemName = $p_systemName,",
				"          lastProcessedTimestamp = coalesce(toTimestamp(byName('newMaxTimestamp')), toTimestamp(byName('lastProcessedTimestamp')))) ~> setRowToUpdateTimestamp",
				"BillingSilverSourceDelete, selectLastProcessedTimestampPerSystem join(toTimestamp(byName('_UpdateTimeStamp')) > lastProcessedTimestamp,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> GetDeletedRecordsWithMaxTimeStampOnly",
				"GetDeletedRecordsWithMaxTimeStampOnly derive(FISCALYEARPERIOD = toInteger(null()),",
				"          {_key_IPLANT} = toInteger(null()),",
				"          {_key_ISALESORGANIZATION} = toInteger(null()),",
				"          {_key_IPROFITCENTER} = toInteger(null()),",
				"          {_key_IDISTRIBUTIONCHANNEL} = toInteger(null()),",
				"          {_key_IDIVISION} = toInteger(null()),",
				"          {_key_ISHIPPINGPOINT} = toInteger(null()),",
				"          {_key_ICONTROLLINGAREA} = toInteger(null()),",
				"          {_key_IPRODUCTGROUP2} = toInteger(null()),",
				"          {_key_ICOSTCENTER} = toInteger(null()),",
				"          {_key_ICOMPANYCODE} = toInteger(null()),",
				"          {_key_IPRODUCT} = toInteger(null()),",
				"          {_key_IPERSONWORKAGREEMENT1} = toInteger(null()),",
				"          {_key_IBUSINESSAREA} = toInteger(null()),",
				"          {_key_ICUSTOMERPayerParty} = toInteger(null()),",
				"          {_key_ICUSTOMERPSoldToParty} = toInteger(null()),",
				"          {_key_ICUSTOMERPBillToParty} = toInteger(null()),",
				"          {_key_ICUSTOMERPShipToParty} = toInteger(null()),",
				"          {_key_OVERALLBILLINGSTATUS} = toInteger(null()),",
				"          {_key_BILLINGDOCUMENTTYPE} = toInteger(null()),",
				"          {_key_ICUSTOMERGROUP} = toInteger(null())) ~> AddKeyColumns",
				"AllowDelete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','C_BILLINGDOCITEMBASICDEX_1')),",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:($p_keyFields),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> GoldDeleteTarget",
				"AllowUpsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/','C_BILLINGDOCITEMBASICDEX_1')),",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:($p_keyFields),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     )) ~> GoldUpsertTarget",
				"AllowDelete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {_key_ICUSTOMERPShipToParty} as integer,",
				"          {_key_ICUSTOMERPBillToParty} as integer,",
				"          {_key_ICUSTOMERPSoldToParty} as integer,",
				"          {_key_ICUSTOMERPayerParty} as integer,",
				"          {_key_IBUSINESSAREA} as integer,",
				"          {_key_IPERSONWORKAGREEMENT1} as integer,",
				"          {_key_IPRODUCT} as integer,",
				"          {_key_IDELIVERYBLOCKSTATUS} as integer,",
				"          {_key_IDELIVERYBLOCKREASON} as integer,",
				"          {_key_IPRODUCTGROUP2} as integer,",
				"          {_key_ICONTROLLINGAREA} as integer,",
				"          {_key_ISHIPPINGPOINT} as integer,",
				"          {_key_IDIVISION} as integer,",
				"          {_key_IDISTRIBUTIONCHANNEL} as integer,",
				"          {_key_IPROFITCENTER} as integer,",
				"          {_key_ISALESORGANIZATION} as integer,",
				"          {_key_IPLANT} as integer,",
				"          SALESDOCUMENT as string,",
				"          SALESDOCUMENTITEM as integer,",
				"          SDDOCUMENTCATEGORY as string,",
				"          SALESDOCUMENTTYPE as string,",
				"          SALESDOCUMENTITEMCATEGORY as string,",
				"          ISRETURNSITEM as string,",
				"          CREATIONDATE as date,",
				"          CREATIONTIME as string,",
				"          LASTCHANGEDATE as date,",
				"          SALESORGANIZATION as string,",
				"          DISTRIBUTIONCHANNEL as string,",
				"          DIVISION as string,",
				"          SALESGROUP as string,",
				"          SALESOFFICE as string,",
				"          INTERNATIONALARTICLENUMBER as string,",
				"          BATCH as string,",
				"          MATERIAL as string,",
				"          PRODUCT as string,",
				"          ORIGINALLYREQUESTEDMATERIAL as string,",
				"          MATERIALSUBSTITUTIONREASON as string,",
				"          MATERIALGROUP as string,",
				"          PRODUCTGROUP as string,",
				"          ADDITIONALMATERIALGROUP1 as string,",
				"          ADDITIONALMATERIALGROUP2 as string,",
				"          ADDITIONALMATERIALGROUP3 as string,",
				"          ADDITIONALMATERIALGROUP4 as string,",
				"          ADDITIONALMATERIALGROUP5 as string,",
				"          PURCHASEORDERBYCUSTOMER as string,",
				"          SALESDOCUMENTITEMTEXT as string,",
				"          SOLDTOPARTY as string,",
				"          ADDITIONALCUSTOMERGROUP1 as string,",
				"          ADDITIONALCUSTOMERGROUP2 as string,",
				"          ADDITIONALCUSTOMERGROUP3 as string,",
				"          ADDITIONALCUSTOMERGROUP4 as string,",
				"          ADDITIONALCUSTOMERGROUP5 as string,",
				"          SHIPTOPARTY as string,",
				"          PAYERPARTY as string,",
				"          BILLTOPARTY as string,",
				"          SALESEMPLOYEE as integer,",
				"          SALESEMPLOYEEWORKAGREEMENT as integer,",
				"          RESPONSIBLEEMPLOYEE as integer,",
				"          RESPONSIBLEEMPLOYEEWORKAGRMT as integer,",
				"          SDDOCUMENTREASON as string,",
				"          SALESDOCUMENTDATE as date,",
				"          ORDERQUANTITY as decimal(20,3),",
				"          ORDERQUANTITYUNIT as integer,",
				"          TARGETQUANTITY as decimal(20,3),",
				"          TARGETQUANTITYUNIT as integer,",
				"          TARGETTOBASEQUANTITYDNMNTR as decimal(5,0),",
				"          TARGETTOBASEQUANTITYNMRTR as decimal(5,0),",
				"          ORDERTOBASEQUANTITYDNMNTR as decimal(5,0),",
				"          ORDERTOBASEQUANTITYNMRTR as decimal(5,0),",
				"          CONFDDELIVQTYINORDERQTYUNIT as decimal(20,3),",
				"          TARGETDELIVQTYINORDERQTYUNIT as decimal(20,3),",
				"          CONFDDELIVERYQTYINBASEUNIT as decimal(20,3),",
				"          BASEUNIT as integer,",
				"          REQUESTEDQUANTITYINBASEUNIT as decimal(20,3),",
				"          ITEMGROSSWEIGHT as decimal(20,3),",
				"          ITEMNETWEIGHT as decimal(20,3),",
				"          ITEMWEIGHTUNIT as integer,",
				"          ITEMVOLUME as decimal(20,3),",
				"          ITEMVOLUMEUNIT as integer,",
				"          SERVICESRENDEREDDATE as date,",
				"          SALESDISTRICT as string,",
				"          CUSTOMERGROUP as string,",
				"          HDRORDERPROBABILITYINPERCENT as integer,",
				"          ITEMORDERPROBABILITYINPERCENT as integer,",
				"          SALESDOCUMENTRJCNREASON as string,",
				"          PRICINGDATE as date,",
				"          EXCHANGERATEDATE as date,",
				"          PRICEDETNEXCHANGERATE as decimal(22,5),",
				"          STATISTICALVALUECONTROL as string,",
				"          NETAMOUNT as decimal(19,2),",
				"          TRANSACTIONCURRENCY as integer,",
				"          SALESORGANIZATIONCURRENCY as integer,",
				"          NETPRICEAMOUNT as decimal(19,2),",
				"          NETPRICEQUANTITY as decimal(5,0),",
				"          NETPRICEQUANTITYUNIT as integer,",
				"          TAXAMOUNT as decimal(19,2),",
				"          COSTAMOUNT as decimal(19,2),",
				"          SUBTOTAL1AMOUNT as decimal(19,2),",
				"          SUBTOTAL2AMOUNT as decimal(19,2),",
				"          SUBTOTAL3AMOUNT as decimal(19,2),",
				"          SUBTOTAL4AMOUNT as decimal(19,2),",
				"          SUBTOTAL5AMOUNT as decimal(19,2),",
				"          SUBTOTAL6AMOUNT as decimal(19,2),",
				"          CAPPEDNETAMOUNT as decimal(19,2),",
				"          SHIPPINGPOINT as string,",
				"          SHIPPINGTYPE as string,",
				"          DELIVERYPRIORITY as integer,",
				"          INVENTORYSPECIALSTOCKTYPE as string,",
				"          REQUESTEDDELIVERYDATE as date,",
				"          SHIPPINGCONDITION as string,",
				"          DELIVERYBLOCKREASON as string,",
				"          PLANT as string,",
				"          STORAGELOCATION as string,",
				"          ROUTE as string,",
				"          INCOTERMSCLASSIFICATION as string,",
				"          INCOTERMSVERSION as string,",
				"          INCOTERMSTRANSFERLOCATION as string,",
				"          INCOTERMSLOCATION1 as string,",
				"          INCOTERMSLOCATION2 as string,",
				"          MINDELIVERYQTYINBASEUNIT as decimal(20,3),",
				"          UNLIMITEDOVERDELIVERYISALLOWED as string,",
				"          OVERDELIVTOLRTDLMTRATIOINPCT as decimal(18,1),",
				"          UNDERDELIVTOLRTDLMTRATIOINPCT as decimal(18,1),",
				"          PARTIALDELIVERYISALLOWED as string,",
				"          BINDINGPERIODVALIDITYSTARTDATE as date,",
				"          BINDINGPERIODVALIDITYENDDATE as date,",
				"          COMPLETIONRULE as string,",
				"          OUTLINEAGREEMENTTARGETAMOUNT as decimal(19,2),",
				"          BILLINGDOCUMENTDATE as date,",
				"          BILLINGCOMPANYCODE as string,",
				"          HEADERBILLINGBLOCKREASON as string,",
				"          ITEMBILLINGBLOCKREASON as string,",
				"          ITEMISBILLINGRELEVANT as string,",
				"          BILLINGPLAN as string,",
				"          CUSTOMERPAYMENTTERMS as string,",
				"          FISCALYEAR as integer,",
				"          FISCALPERIOD as integer,",
				"          CUSTOMERACCOUNTASSIGNMENTGROUP as string,",
				"          EXCHANGERATETYPE as string,",
				"          CURRENCY as integer,",
				"          FISCALYEARVARIANT as string,",
				"          BUSINESSAREA as string,",
				"          PROFITCENTER as string,",
				"          ORDERID as string,",
				"          WBSELEMENTINTERNALID as integer,",
				"          PROFITABILITYSEGMENT as integer,",
				"          PROFITABILITYSEGMENT_2 as string,",
				"          CONTROLLINGAREA as string,",
				"          REFERENCESDDOCUMENT as string,",
				"          REFERENCESDDOCUMENTITEM as integer,",
				"          REFERENCESDDOCUMENTCATEGORY as string,",
				"          ORIGINSDDOCUMENT as string,",
				"          ORIGINSDDOCUMENTITEM as integer,",
				"          BUSINESSSOLUTIONORDER as string,",
				"          BUSINESSSOLUTIONORDERITEM as integer,",
				"          OVERALLSDPROCESSSTATUS as string,",
				"          OVERALLTOTALDELIVERYSTATUS as string,",
				"          OVERALLORDRELTDBILLGSTATUS as string,",
				"          TOTALCREDITCHECKSTATUS as string,",
				"          OVERALLSDDOCUMENTREJECTIONSTS as string,",
				"          OVERALLTOTALSDDOCREFSTATUS as string,",
				"          OVERALLSDDOCREFERENCESTATUS as string,",
				"          OVERALLDELIVCONFSTATUS as string,",
				"          OVERALLDELIVERYSTATUS as string,",
				"          DELIVERYBLOCKSTATUS as string,",
				"          BILLINGBLOCKSTATUS as string,",
				"          TOTALSDDOCREFERENCESTATUS as string,",
				"          SDDOCREFERENCESTATUS as string,",
				"          SDDOCUMENTREJECTIONSTATUS as string,",
				"          ITEMGENERALINCOMPLETIONSTATUS as string,",
				"          ITEMBILLINGINCOMPLETIONSTATUS as string,",
				"          PRICINGINCOMPLETIONSTATUS as string,",
				"          ITEMDELIVERYINCOMPLETIONSTATUS as string,",
				"          DELIVERYCONFIRMATIONSTATUS as string,",
				"          ORDERRELATEDBILLINGSTATUS as string,",
				"          SDPROCESSSTATUS as string,",
				"          TOTALDELIVERYSTATUS as string,",
				"          DELIVERYSTATUS as string,",
				"          {_UpdateTimeStamp} as timestamp,",
				"          {_SystemName} as string,",
				"          MaxUpdateTimeStamp as timestamp,",
				"          FISCALYEARPERIOD as integer",
				"     ),",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: ('dmgold'),",
				"     tableName: ($p_name),",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: true,",
				"     upsertable: false,",
				"     keys:($p_keyFields),",
				"     allowCopyCommand: true,",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SQLDeleteTarget",
				"AllowUpsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: ('dmgold'),",
				"     tableName: ($p_name),",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['BILLINGDOCUMENT','BILLINGDOCUMENTITEM','_SystemName'],",
				"     allowCopyCommand: true,",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SQLUpsertTarget",
				"allowUpdateLastProcessedTimestamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CDSViewName as string,",
				"          inScope as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CDSViewName','systemName'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError') ~> updateLastProcessedTimestamp"
			]
		}
	}
}
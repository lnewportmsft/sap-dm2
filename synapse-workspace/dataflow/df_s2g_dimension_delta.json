{
	"name": "df_s2g_dimension_delta",
	"properties": {
		"folder": {
			"name": "SIlver_To_Gold"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "SilverSource",
					"description": "Domain dataset on the Silver Area"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "SilverSourceDelete"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "GoldTargetToGetKeys"
				},
				{
					"dataset": {
						"referenceName": "ds_metadata",
						"type": "DatasetReference"
					},
					"name": "getMaxIdAndTimestamp"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "GoldDeleteTarget"
				},
				{
					"linkedService": {
						"referenceName": "ls_SQLPool",
						"type": "LinkedServiceReference"
					},
					"name": "GoldSqlInsertTarget"
				},
				{
					"linkedService": {
						"referenceName": "ls_SQLPool",
						"type": "LinkedServiceReference"
					},
					"name": "GoldSqlDeleteTarget"
				},
				{
					"linkedService": {
						"referenceName": "ls_dataLake",
						"type": "LinkedServiceReference"
					},
					"name": "GoldInsertDelta"
				},
				{
					"dataset": {
						"referenceName": "ds_metadata",
						"type": "DatasetReference"
					},
					"name": "updateMaxId"
				},
				{
					"dataset": {
						"referenceName": "ds_metadata",
						"type": "DatasetReference"
					},
					"name": "updateLastProcessedTimestamp"
				}
			],
			"transformations": [
				{
					"name": "GetRecordsWithMaxTimeStampOnly"
				},
				{
					"name": "AllowDelete"
				},
				{
					"name": "JoinToGetKeys"
				},
				{
					"name": "SplitIfKeyAlreadyExists"
				},
				{
					"name": "CrossJoinToMaxKey"
				},
				{
					"name": "AddsurrogateKey"
				},
				{
					"name": "CalcualteFinalNewKey"
				},
				{
					"name": "SelectOnlyTargetColumns"
				},
				{
					"name": "aggregateMaxId"
				},
				{
					"name": "selectMaxId"
				},
				{
					"name": "filterLastProcessedTimestampForSystem"
				},
				{
					"name": "selectLastProcessedTimestampPerSystem"
				},
				{
					"name": "selectSourceColumns"
				},
				{
					"name": "unionResults"
				},
				{
					"name": "allowUpsert"
				},
				{
					"name": "getNewMaxId"
				},
				{
					"name": "setRowToUpdate"
				},
				{
					"name": "allowUpdateMaxId"
				},
				{
					"name": "getNewMaxTimestamp"
				},
				{
					"name": "setRowToUpdateTimestamp"
				},
				{
					"name": "allowUpdateLastProcessedTimestamp"
				},
				{
					"name": "setLastProcessedTimestamp"
				},
				{
					"name": "sortByUpdateTimestamp"
				},
				{
					"name": "getCDSViewNameAndSystemName"
				},
				{
					"name": "retrieveOldTimestamp"
				},
				{
					"name": "retrieveOldMaxId"
				},
				{
					"name": "AddLanguageISOCode"
				},
				{
					"name": "GetDeletedRecordsWithMaxTimeStampOnly"
				},
				{
					"name": "AddKeyColumns"
				},
				{
					"name": "SelectSourceColumnsDelete"
				}
			],
			"scriptLines": [
				"parameters{",
				"     p_name as string,",
				"     p_directory as string,",
				"     p_container as string (\"sap\"),",
				"     p_systemName as string (\"PM4CLNT400\"),",
				"     p_keyFields as string[],",
				"     p_sqlschema as string (\"dmgold\")",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/', $p_systemName, '/silver/', $p_name))) ~> SilverSource",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/silver/delete/',$p_name))) ~> SilverSourceDelete",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/',$p_name)\r",
				")) ~> GoldTargetToGetKeys",
				"source(output(",
				"          CDSViewName as string,",
				"          inScope as boolean,",
				"          systemName as string,",
				"          checkpointId as string,",
				"          maxId as long,",
				"          lastProcessedTimestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"SELECT * FROM dbo.extractionScope WHERE CDSViewName = \\'\" + $p_name + \"\\'\"),",
				"     format: 'query') ~> getMaxIdAndTimestamp",
				"SilverSource, selectLastProcessedTimestampPerSystem join(toTimestamp(byName('_UpdateTimeStamp')) > lastProcessedTimestamp,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> GetRecordsWithMaxTimeStampOnly",
				"AddKeyColumns alterRow(deleteIf(true())) ~> AllowDelete",
				"GetRecordsWithMaxTimeStampOnly, GoldTargetToGetKeys join(toString(reduce(array(toString(byNames($p_keyFields,'GetRecordsWithMaxTimeStampOnly'))), '', concat(#acc,coalesce(toString(#item),'')), #result)) == toString(reduce(array(toString(byNames($p_keyFields,'GoldTargetToGetKeys'))), '', concat(#acc,coalesce(toString(#item),'')), #result))",
				"     && toString(byName('_SystemName')) == toString(byName('_SystemName')),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> JoinToGetKeys",
				"AddLanguageISOCode split(isNull(byName(\"Key\")),",
				"     disjoint: false) ~> SplitIfKeyAlreadyExists@(CreateKeys, KeyExists)",
				"SplitIfKeyAlreadyExists@CreateKeys, selectMaxId join(true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CrossJoinToMaxKey",
				"CrossJoinToMaxKey keyGenerate(output(tmpKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddsurrogateKey",
				"AddsurrogateKey derive(Key = toInteger(tmpKey + coalesce(toInteger(maxId),0))) ~> CalcualteFinalNewKey",
				"CalcualteFinalNewKey select(mapColumn(",
				"          each(match(and(notEquals('maxId',name),notEquals('tmpKey',name))))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyTargetColumns",
				"getMaxIdAndTimestamp aggregate(maxId = max(maxId)) ~> aggregateMaxId",
				"aggregateMaxId select(mapColumn(",
				"          maxId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMaxId",
				"getMaxIdAndTimestamp filter(systemName == $p_systemName) ~> filterLastProcessedTimestampForSystem",
				"setLastProcessedTimestamp select(mapColumn(",
				"          lastProcessedTimestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectLastProcessedTimestampPerSystem",
				"JoinToGetKeys select(mapColumn(",
				"          each(match(stream=='SilverSource')),",
				"          each(match(name=='Key'),",
				"               'Key' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSourceColumns",
				"SelectOnlyTargetColumns, SplitIfKeyAlreadyExists@KeyExists union(byName: true)~> unionResults",
				"sortByUpdateTimestamp alterRow(upsertIf(true())) ~> allowUpsert",
				"unionResults aggregate(newMaxId = max(toInteger(byName('Key')))) ~> getNewMaxId",
				"retrieveOldMaxId derive(CDSViewName = $p_name,",
				"          maxId = coalesce(toInteger(byName('newMaxId')),toInteger(byName('maxId')))) ~> setRowToUpdate",
				"setRowToUpdate alterRow(updateIf(true())) ~> allowUpdateMaxId",
				"unionResults aggregate(newMaxTimestamp = max(toTimestamp(byName('_UpdateTimeStamp')))) ~> getNewMaxTimestamp",
				"retrieveOldTimestamp derive(CDSViewName = $p_name,",
				"          systemName = $p_systemName,",
				"          lastProcessedTimestamp = coalesce(toTimestamp(byName('newMaxTimestamp')), toTimestamp(byName('lastProcessedTimestamp')))) ~> setRowToUpdateTimestamp",
				"setRowToUpdateTimestamp alterRow(updateIf(true())) ~> allowUpdateLastProcessedTimestamp",
				"filterLastProcessedTimestampForSystem derive(lastProcessedTimestamp = coalesce(lastProcessedTimestamp, toTimestamp('1900-01-01 00:00:00'))) ~> setLastProcessedTimestamp",
				"unionResults sort(asc(toTimestamp(byName('_UpdateTimeStamp')), true)) ~> sortByUpdateTimestamp",
				"getMaxIdAndTimestamp select(mapColumn(",
				"          CDSViewName,",
				"          systemName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> getCDSViewNameAndSystemName",
				"getNewMaxTimestamp, selectLastProcessedTimestampPerSystem join(true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> retrieveOldTimestamp",
				"getNewMaxId, selectMaxId join(true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> retrieveOldMaxId",
				"selectSourceColumns derive(each(match(name=='LANGUAGE'), '_ISOLanguage' = case(\r",
				"     toString(byName('LANGUAGE'))=='a', 'AF',\r",
				"     toString(byName('LANGUAGE'))=='L', 'PL',\r",
				"     toString(byName('LANGUAGE'))=='0', 'SR',\r",
				"     toString(byName('LANGUAGE'))=='1', 'ZH',\r",
				"     toString(byName('LANGUAGE'))=='2', 'TH',\r",
				"     toString(byName('LANGUAGE'))=='3', 'KO',\r",
				"     toString(byName('LANGUAGE'))=='4', 'RO',\r",
				"     toString(byName('LANGUAGE'))=='5', 'SL',\r",
				"     toString(byName('LANGUAGE'))=='6', 'HR',\r",
				"     toString(byName('LANGUAGE'))=='7', 'MS',\r",
				"     toString(byName('LANGUAGE'))=='8', 'UK',\r",
				"     toString(byName('LANGUAGE'))=='9', 'ET',\r",
				"     toString(byName('LANGUAGE'))=='A', 'AR',\r",
				"     toString(byName('LANGUAGE'))=='B', 'HE',\r",
				"     toString(byName('LANGUAGE'))=='C', 'CS',\r",
				"     toString(byName('LANGUAGE'))=='D', 'DE',\r",
				"     toString(byName('LANGUAGE'))=='E', 'EN',\r",
				"     toString(byName('LANGUAGE'))=='F', 'FR',\r",
				"     toString(byName('LANGUAGE'))=='G', 'EL',\r",
				"     toString(byName('LANGUAGE'))=='H', 'HU',\r",
				"     toString(byName('LANGUAGE'))=='I', 'IT',\r",
				"     toString(byName('LANGUAGE'))=='J', 'JA',\r",
				"     toString(byName('LANGUAGE'))=='K', 'DA',\r",
				"     toString(byName('LANGUAGE'))=='L', 'PL',\r",
				"     toString(byName('LANGUAGE'))=='M', 'ZF',\r",
				"     toString(byName('LANGUAGE'))=='N', 'NL',\r",
				"     toString(byName('LANGUAGE'))=='O', 'NO',\r",
				"     toString(byName('LANGUAGE'))=='P', 'PT',\r",
				"     toString(byName('LANGUAGE'))=='Q', 'SK',\r",
				"     toString(byName('LANGUAGE'))=='R', 'RU',\r",
				"     toString(byName('LANGUAGE'))=='S', 'ES',\r",
				"     toString(byName('LANGUAGE'))=='T', 'TR',\r",
				"     toString(byName('LANGUAGE'))=='U', 'FI',\r",
				"     toString(byName('LANGUAGE'))=='V', 'SV',\r",
				"     toString(byName('LANGUAGE'))=='W', 'BG',\r",
				"     toString(byName('LANGUAGE'))=='X', 'LT',\r",
				"     toString(byName('LANGUAGE'))=='Y', 'LV',\r",
				"     toString(byName('LANGUAGE'))=='Z', 'Z1',\r",
				"     toString(byName('LANGUAGE'))=='a', 'AF',\r",
				"     toString(byName('LANGUAGE'))=='b', 'IS',\r",
				"     toString(byName('LANGUAGE'))=='c', 'CA',\r",
				"     toString(byName('LANGUAGE'))=='d', 'SH',\r",
				"     toString(byName('LANGUAGE'))=='i', 'ID',\r",
				"     toString(byName('LANGUAGE'))=='묩', 'HI',\r",
				"     toString(byName('LANGUAGE'))=='뱋', 'KK',\r",
				"     toString(byName('LANGUAGE'))=='쁩', 'VI'\r",
				"))) ~> AddLanguageISOCode",
				"SilverSourceDelete, selectLastProcessedTimestampPerSystem join(toTimestamp(byName('_UpdateTimeStamp')) > lastProcessedTimestamp,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> GetDeletedRecordsWithMaxTimeStampOnly",
				"SelectSourceColumnsDelete derive(Key = toInteger(null())) ~> AddKeyColumns",
				"GetDeletedRecordsWithMaxTimeStampOnly select(mapColumn(",
				"          each(match(stream=='SilverSourceDelete'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSourceColumnsDelete",
				"AllowDelete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/',$p_name)),",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: true,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:($p_keyFields),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> GoldDeleteTarget",
				"allowUpsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: ($p_sqlschema),",
				"     tableName: ($p_name),",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:(add($p_keyFields, ['_SystemName'])),",
				"     allowCopyCommand: true,",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> GoldSqlInsertTarget",
				"AllowDelete sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: ($p_sqlschema),",
				"     tableName: ($p_name),",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: true,",
				"     upsertable: false,",
				"     keys:($p_keyFields),",
				"     allowCopyCommand: true,",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> GoldSqlDeleteTarget",
				"allowUpsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: ($p_container),",
				"     folderPath: (concat('data/',$p_systemName,'/gold/',$p_name)),",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:(add($p_keyFields, ['_SystemName'])),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2) ~> GoldInsertDelta",
				"allowUpdateMaxId sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CDSViewName as string,",
				"          inScope as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CDSViewName'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError') ~> updateMaxId",
				"allowUpdateLastProcessedTimestamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CDSViewName as string,",
				"          inScope as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CDSViewName','systemName'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError') ~> updateLastProcessedTimestamp"
			]
		}
	}
}